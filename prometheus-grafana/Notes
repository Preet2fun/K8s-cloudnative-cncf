# How to Setup Prometheus Monitoring On Kubernetes Cluster

# we will create a Kubernetes namespace for all our monitoring components

kubectl create namespace monitoring

Step 1: Create a file named clusterRole.yaml.
Step 2: Create the role using the following command.
kubectl create -f clusterRole.yaml

Create a Config Map To Externalize Prometheus Configurations
All configurations for Prometheus are part of prometheus.yaml file and all the alert rules for Alertmanager are configured in prometheus.rules.

prometheus.yaml: This is the main Prometheus configuration which holds all the scrape configs, service discovery details, storage locations, data retention configs, etc)

prometheus.rules: This file contains all the Prometheus alerting rules

By externalizing Prometheus configs to a Kubernetes config map, you don’t have to build the Prometheus image whenever you need to add or remove a configuration. You need to update the config map and restart the Prometheus pods to apply the new configuration.

Step 1: Create a file called config-map.yaml.
Step 2: Execute the following command to create the config map in Kubernetes.

kubectl create -f config-map.yaml

The prometheus.yaml contains all the configurations to discover pods and services running in the Kubernetes cluster dynamically. We have the following scrape jobs in our Prometheus scrape configuration.

1) kubernetes-apiservers: It gets all the metrics from the API servers.
2) kubernetes-nodes: It collects all the kubernetes node metrics.
3) kubernetes-pods: All the pod metrics get discovered if the pod metadata is annotated with prometheus.io/scrape and prometheus.io/port annotations.
4) kubernetes-cadvisor: Collects all cAdvisor metrics.
5) kubernetes-service-endpoints: All the Service endpoints are scrapped if the service metadata is annotated with prometheus.io/scrape and prometheus.io/port annotations. It can be used for black-box monitoring.

Step 1: Create a file named prometheus-deployment.yaml. In this configuration, we are mounting the Prometheus config map as a file inside /etc/prometheus

Step 2: Create a deployment on monitoring namespace using the above file.
kubectl create  -f prometheus-deployment.yaml 

Step 3: You can check the created deployment using the following command.
kubectl get deployments --namespace=monitoring

Exposing Prometheus as a Service [NodePort & LoadBalancer]
To access the Prometheus dashboard over a IP or a DNS name, you need to expose it as a Kubernetes service.

Step 1: Create a file named prometheus-service.yaml. We will expose Prometheus on all kubernetes node IP’s on port 30000.

Step 2: Create the service using the following command.
kubectl create -f prometheus-service.yaml --namespace=monitoring

Step 3: Once created, you can access the Prometheus dashboard using any of the Kubernetes node’s IP on port 30000. If you are on the cloud, make sure you have the right firewall rules to access port 30000 from your workstation.





